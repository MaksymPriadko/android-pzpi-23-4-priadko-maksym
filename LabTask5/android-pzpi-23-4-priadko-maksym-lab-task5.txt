МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ


КАФЕДРА ПРОГРАМНОЇ ІНЖЕНЕРІЇ




Звіт
з лабораторної роботи № 5 з дисципліни
Програмування під Android
   





Виконав:                                                                                     Перевірив:
ст. гр. ПЗПІ-23-4                        					ст. викладач кафедри ПІ
Прядко Максим									Сокорчук Ігор Петрович









Харків 2024
ЗАВДАННЯ

	Доповнити завдання №4 наступними функціями:
1.	реалізувати різне відображення для портретної та ланшафтної орієнтації екрану за допомогою тих самих фрагментів;
2.	створити дві редаговані теми (тло, гарнітура шрифту, колір тексту тощо) і застосовувати їх в залежності від налаштувань програми.
3.	Додати можливість задавати в налаштуваннях програми розмір шрифту.
4.	Переробити завдання №4 так, щоб дані нотаток зберігалися у базі даних SQLite
 
ХІД РОБОТИ

Створюємо новий проєкт та обираємо Empty Views Activity.
Зберігання нотаток у базі даних SQLite було реалізовано одразу при роботі над лабораторною роботою 4, тому перейдемо до інших пунктів.
Реалізація стилів
У папці themes прописуємо 3 різні стилі, які змінюють розмір шрифту для тексту. Створимо окремі стилі для blueStyle, brownStyle для різних відображень розмітки.
Фрагмент коду для реалізації різних стилів:
1.    <style name="blueStyle" parent="Theme.Material3.DayNight.NoActionBar">
2.        <item name="editTextStyle">@style/EditTextStyleForBlueStyle</item>
3.        <item name="android:buttonStyle">@style/ButtonStyleForBlueStyle</item>
4.        <item name="android:textViewStyle">@style/TextViewStyleForBlueStyle</item>
5.        <item name="toolbarStyle">@style/CustomToolbarForBlueStyle</item>
6.    </style>

7.    <style name="ButtonStyleForBlueStyle" parent="Widget.AppCompat.Button">
8.        <item name="android:backgroundTint">@color/blueButton</item>
9.        <item name="android:textColor">@color/blueText</item>
10.        <item name="android:padding">5dp</item>
 11.       <item name="android:fontFamily">@font/blue_font_family</item>
12.    </style>
13.
14.    <style name="EditTextStyleForBlueStyle" parent="Widget.AppCompat.EditText">
15.        <item name="android:textColor">@color/blueText</item>
 16.       <item name="android:textColorHint">@color/blueText</item>
17.        <item name="android:fontFamily">@font/blue_font_family</item>
18.    </style>
19.
20.    <style name="TextViewStyleForBlueStyle" parent="Widget.AppCompat.TextView">
21       <item name="android:textColor">@color/blueText</item>
22.        <item name="fontFamily">@font/blue_font_family</item>
23.    </style>

Використання фрагментів для різної орієнтації екрану
Створимо новий фрагмент activity_create_and_edit_noteFragment. Реалізуємо основні методи onCreateView, onViewCreated, тощо. Завантажимо фрагмент за допомогою getSupportFragmentManager. Зробимо два різних фрагмента для різної орієнтаціє екрану. Повний код можна буде переглянути у ДОДАТОК А.
Фрагмент коду для реалізації фрагменту:
4.	@Override
5.	    public void onResume() {
6.	        super.onResume();
7.	        Activity activity = getActivity();
8.	        if (activity != null && activity.getWindow() != null) {
9.	            activity.getWindow().addFlags(WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS);
10.	        }
11.	
12.	        delayedHide(100);
13.	    }
14.	
15.	    @Override
16.	    public void onPause() {
17.	        super.onPause();
18.	        if (getActivity() != null && getActivity().getWindow() != null) {
19.	            getActivity().getWindow().clearFlags(WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS);
20.	
21.	            // Clear the systemUiVisibility flag
22.	            getActivity().getWindow().getDecorView().setSystemUiVisibility(0);
23.	        }
24.	        show();
    } 

 
ВИСНОВОК

	Виконавши лабораторну роботу №5, я навчився реалізовувати різні стилі та динамічно їх змінювати, змінювати розмітку в різній орієнтації екрану за допомогою фрагментів, зберігати дані в базі даних. 
Посилання на відеозвіт: https://youtu.be/PX7arwNM694

 
ВИКОРИСТАНІ ДЖЕРЕЛА

1. Документація по Fragments 
URL: https://developer.android.com/guide/fragments 
(дата звернення: 20.12.2024).





















 
ДОДАТОК А
Код activity_create_and_edit_noteFragment

package nure.priadko.maksym;

import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.view.MenuItem;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import android.widget.Spinner;

import androidx.activity.EdgeToEdge;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.SearchView;
import androidx.core.content.ContextCompat;
import androidx.core.graphics.Insets;
import androidx.core.view.ViewCompat;
import androidx.core.view.WindowInsetsCompat;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

public class MainActivity extends BaseActivity {
    DBHelper db;
    NoteAdapter noteAdapter;
    String currentSubstring = "";
    RecyclerView notesRecycleView;
    Spinner importanceFilter;
    Notes Notes;

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        EdgeToEdge.enable(this);
        int color = applyStyles();
        setContentView(R.layout.activity_main);
        LinearLayout layout = findViewById(R.id.main);
        layout.setBackgroundColor(ContextCompat.getColor(this, color));
        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main), (v, insets) -> {
            Insets systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars());
            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom);
            return insets;
        });
        Notes = ((NotesApplication) getApplication()).GetNotes();
        db = Notes.getDBHelper();
        Button newNoteButton = findViewById(R.id.newNoteButton);
        notesRecycleView = findViewById(R.id.notesRecycleView);
        SearchView searchView = findViewById(R.id.noteSearchView);
        notesRecycleView.setLayoutManager(new LinearLayoutManager(this));
        Notes.updateNotes();
        noteAdapter = new NoteAdapter(Notes.getNotes(), this, getApplication());
        notesRecycleView.setAdapter(noteAdapter);
        importanceFilter = findViewById(R.id.importanceFilter);
        String[] importanceLevels = new String[]{getString(R.string.all), getString(R.string.lowImportance), getString(R.string.mediumImportance), getString(R.string.highImportance)};
        ArrayAdapter<String> arrayAdapter = new ArrayAdapter<>(this, android.R.layout.simple_spinner_item, importanceLevels);
        importanceFilter.setAdapter(arrayAdapter);
        ImageButton settingsButton = findViewById(R.id.settingsButton);
        SharedPreferences sharedPreferences = getSharedPreferences("Settings", MODE_PRIVATE);
        String style = sharedPreferences.getString("style", "summer");

        settingsButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent intent = new Intent(MainActivity.this, Settings.class);
                startActivityForResult(intent, 0);
            }
        });
        importanceFilter.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                Filter(currentSubstring, notesRecycleView, importanceFilter);
            }

            @Override
            public void onNothingSelected(AdapterView<?> parent) {

            }
        });
        searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {
            @Override
            public boolean onQueryTextSubmit(String query) {
                return true;
            }

            @Override
            public boolean onQueryTextChange(String newText) {
                Filter(newText, notesRecycleView, importanceFilter);
                currentSubstring = newText;
                return true;
            }
        });
        newNoteButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                Intent intent = new Intent(MainActivity.this, CreateAndEditNoteActivity.class);
                startActivityForResult(intent, 1);
            }
        });
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        Filter(currentSubstring, notesRecycleView, importanceFilter);
        noteAdapter.notifyDataSetChanged();
        if (requestCode == 0){
            recreate();
        }
    }

    @Override
    public boolean onContextItemSelected(@NonNull MenuItem item) {
        if (item.getItemId() == R.id.edit){
            Intent intent = new Intent(MainActivity.this, CreateAndEditNoteActivity.class);
            intent.putExtra("edit", true);
            intent.putExtra("view", false);
            intent.putExtra("index", noteAdapter.currentIndex);
            startActivityForResult(intent, 1);
        } else if (item.getItemId() == R.id.delete){
            AlertDialog.Builder builder = new AlertDialog.Builder(MainActivity.this);
            builder.setTitle(R.string.deleteNote);
            builder.setMessage(R.string.deleteConfirmation);
            builder.setPositiveButton(R.string.yes, new DialogInterface.OnClickListener() {
                @Override
                public void onClick(DialogInterface dialog, int which) {
                    Notes.DeleteNote(noteAdapter.currentIndex,  Notes.getNotes().get(noteAdapter.currentIndex).getNumber());
                    noteAdapter.notifyDataSetChanged();
                }
            });
            builder.setNegativeButton(R.string.no, new DialogInterface.OnClickListener() {
                @Override
                public void onClick(DialogInterface dialog, int which) {

                }
            });
            builder.create().show();
        }
        return super.onContextItemSelected(item);
    }

    public void Filter(String newText, RecyclerView notesRecycleView, Spinner importanceFilter){
        noteAdapter = new NoteAdapter(Notes.Filter(newText, newText, importanceFilter.getSelectedItemPosition() != 0, importanceFilter.getSelectedItemPosition() - 1), this, getApplication());
        notesRecycleView.setAdapter(noteAdapter);
    }
